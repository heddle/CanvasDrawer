@using CanvasDrawer.Graphics
@using CanvasDrawer.Graphics.Popup
@using CanvasDrawer.Pages
@using CanvasDrawer.Graphics.Theme
@inject IJSRuntime JSRuntime
@namespace ConnectorChooser
<style>

        .cxouterdiv {
            position: absolute;
            left: @ChooserLeft();
            top: @ChooserTop();
            width: inherit;
            height: inherit;
            border: none;
        }

        .cxbtn-group {
            pointer-events: none;
        }

        .cxbtn-group button {
            background-color: @BackgroundColor();
            border: none;
            padding: 0;
            cursor: pointer;
            float: left;
            margin: 0;
            width: 28px;
            height: 28px;
            outline: none;
            pointer-events:all;
        }


        /* Add a background color on hover */
        .cxbtn-group button:hover {
            background-color: @HoverColor();
        }

        .cxbtn-group button:focus {
            outline: none;
        }

            .cxbtn-group img {
                width: 24px;
                height: 24px;
            }

            .cxbtn-group:after {
                content: "";
                clear: both;
                display: table;
            }
</style>

<div class="cxouterdiv" hidden=@CnxMenuHidden()>
    <div class="cxbtn-group">
        @foreach (var ifile in ImageFiles())
        {
            <button id="@ifile"
                    @onclick="@(e => ButtonClick(e, @ifile))"
                    @onmouseover="@(e => MouseOver(e, @ifile))"
                    @onmouseout="@(e => MouseOut(e, @ifile))">
                <img src=@ifile>
            </button>
        }
    </div>
</div>

@code {

    private String[] ImageFiles()
    {

        if (ConnectorMenu.Instance == null)
        {
            return null;
        }

        return ConnectorMenu.Instance.ImageFiles;
    }


    //one of the buttons was hit
    public void ButtonClick(MouseEventArgs me, string name)
    {
        ConnectorMenu.Instance.MenuSelection(name);
    }

    //one of the buttons was entered
    public void MouseOver(MouseEventArgs me, string name)
    {
    }

    //one of the buttons was exited
    public void MouseOut(MouseEventArgs me, string name)
    {
    }

    //X location of connect menu popup
    private String ChooserLeft()
    {
        return ConnectorMenu.Instance.PopupX;
    }

    //Y location of connector menu popup
    private String ChooserTop()
    {
        return ConnectorMenu.Instance.PopupY;
    }

    //is the connector popup up or down?
    private bool CnxMenuHidden()
    {
        return !ConnectorMenu.Instance.PopupVisible;
    }

    //background color of popup
    public String BackgroundColor()
    {
        return ThemeManager.ToolMenuBackgroundColor;
    }

    //hover color of popup
    public String HoverColor()
    {
        return ThemeManager.ToolMenuHoverColor;
    }


    //for calling javascript
    private static JSInteropManager _jsManager = null;

    //watch for initialization
    private static bool _inited = false;

    //initialization
    private Task InitOnce()
    {

        if (!_inited)
        {
            Console.WriteLine("INIT ConnectorChooser");
            _jsManager = JSInteropManager.getInstance(JSRuntime, false);
            _inited = true;
            ConnectorMenu.Instance.Refresher = Refresh;
            Refresh();
        }
        return Task.FromResult("done");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            _inited = false;
            await InitOnce();
        }
        await InitOnce();
    }

    //force a redraw
    public void Refresh()
    {
        StateHasChanged(); //forces an update
    }
}
