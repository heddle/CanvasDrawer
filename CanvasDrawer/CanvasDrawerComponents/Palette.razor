@using CanvasDrawer.Graphics
@using CanvasDrawer.DataModel
@using CanvasDrawer.Pages
@using CanvasDrawer.Graphics.Items
@using CanvasDrawer.Graphics.Editor
@using CanvasDrawer.Graphics.Theme
@using CanvasDrawer.Graphics.Connection
@inject IJSRuntime JSRuntime
@namespace Palette
<style>

    div {
        text-align: center;
    }

    .ptlabel {
        font-family: Arial, Helvetica, sans-serif;
        border-collapse: collapse;
        font-size: 14px;
        width: 100%;
        text-align: left;
        border: none;
        color: @KeyTextColor();
        background: @KeyBackground();
    }

    .pcontainer {
        width: 160px;
        height: @GetPaletteHeight();
        background-color: @PaletteBackground();
        border: solid;
        border-width: 1px;
        border-color: @PaletteBorderColor();
        padding-left: 2px;
        margin-left: 2px;
        padding-top: 2px;
        margin-top: 2px;
        pointer-events: all;
    }

    .grid-container {
        display: grid;
        border-top: 1px solid @PaletteDividerColor();
        border-bottom: none;
        border-left: none;
        border-right: none;
        grid-template-columns: auto auto auto auto;
        background-color: @PaletteBackground();
        padding: 2px;
        height: @GetGridContainerHeight();
        width: 156px

    }

        .grid-container label {
            background: @bgcolors[0];
            border: 3px solid;
            margin: 2px 2px; /* Some padding */
            cursor: pointer; /* Pointer/hand icon */
            float: left;
            width: 26px;
            height: 26px;
            outline: none;
            text-align: center;
            margin-top: 4px;
            pointer-events: all;
            border-radius: 4px;
        }

     .grid-container label.label1 {
            background: @bgcolors[0];
        }

        .grid-container label.label2 {
            background: @bgcolors[1];
        }

        .grid-container label.label3 {
            background: @bgcolors[2];
        }

        .grid-container label.label4 {
            background: @bgcolors[3];
        }

        .grid-container label.label5 {
            background: @bgcolors[4];
        }

        .grid-container label.label6 {
            background: @bgcolors[5];
        }

        .grid-container label.label7 {
            background: @bgcolors[6];
        }

        .grid-container label.label8 {
            background: @bgcolors[7];
        }


</style>

<div class="pcontainer" hidden="@IsHidden()">
    <label class="ptlabel">Connector Color</label>

    <div class="grid-container">
        <label class="label1" id="@IDs[0]"
               @onclick="@(e => Click(e, 0))">
        </label>

        <label class="label2" id="@IDs[1]"
               @onclick="@(e => Click(e, 1))">
        </label>

        <label class="label3" id="@IDs[2]"
               @onclick="@(e => Click(e, 2))">
        </label>

        <label class="label4" id="@IDs[3]"
               @onclick="@(e => Click(e, 3))">
        </label>

        <label class="label5" id="@IDs[4]"
               @onclick="@(e => Click(e, 4))">
        </label>

        <label class="label6" id="@IDs[5]"
               @onclick="@(e => Click(e, 5))">
        </label>
        <label class="label7" id="@IDs[6]"
               @onclick="@(e => Click(e, 6))">
        </label>

        <label class="label8" id="@IDs[7]"
               @onclick="@(e => Click(e, 7))">
        </label>
    </div>
</div>

@code {

    //item being edited
    private static Item _hotItem;

    static PaletteEditor _paletteEditor = null;

    // have we initialized?
    private static bool _inited = false;

    static JSInteropManager _jsManager = null;

    private static int _gridHeight = 66;

    private static readonly String[] IDs = { "L0", "L1", "L2", "L3", "L4", "L5", "L6", "L7" };

    private static readonly String[] bgcolors = {
    ThemeManager.DefaultConnectorLineColor,
    "#00c8ff",
    "#ff5d55",
    "#c0c0c0",
    "#ffc63d",
    "#1464f6",
    "#9c204d",
    "#606060"};

    //clicked on a color swath
    private void Click(MouseEventArgs e, int i)
    {
        ConnectionManager.Instance.ChangeColor((LineConnectorItem)_hotItem, bgcolors[i]);
        FixLabels();
        Refresh();
    }

    //get the height of the palette
    private String GetPaletteHeight()
    {
        return (_gridHeight + 40).ToString() + "px";
    }

    //get the height of the palette
    private String GetGridContainerHeight()
    {
        return _gridHeight.ToString() + "px";
    }
    //get the background color for the keys from the ThemeManager
    public String KeyBackground()
    {
        return ThemeManager.EditorKeyBackground;
    }

    //get the text color for the keys from the ThemeManager
    public String KeyTextColor()
    {
        return ThemeManager.EditorKeyTextColor;
    }

    //border around entire palette, shares color with editor
    String PaletteBorderColor()
    {
        return ThemeManager.EditorBorderColor;
    }

    //line between header and palette proper, shares color with editor
    String PaletteDividerColor()
    {
        return ThemeManager.EditorDividerColor;
    }

    //background color of palette, shares color with editor
    String PaletteBackground()
    {
        return ThemeManager.EditorBackgroundColor;
    }

    //is the editor visible
    bool IsPaletteEditorVisible()
    {
        return DisplayManager.Instance.IsPaletteEditorVisible();
    }

    //Should the component be hidded because the GUI
    //is not editable
    bool IsHidden()
    {
        return !IsPaletteEditorVisible();
    }

    //initialization
    private Task InitOnce()
    {


        if (!_inited)
        {
            Console.WriteLine("INIT Palette");
            _jsManager = JSInteropManager.getInstance(JSRuntime, false);
            _paletteEditor = PaletteEditor.Instance;
            _paletteEditor.SetHotItem = SetHotItem;
            _paletteEditor.Refresher = Refresh;
            _inited = true;
        }
        return Task.FromResult("done");
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            _inited = false;
            await InitOnce();
        }
        await InitOnce();
    }

    private void FixLabels()
    {
        String matchColor = (_hotItem != null) ? _hotItem.GetForeground() : "";

        for (int i = 0; i < 8; i++)
        {
            String bc = (bgcolors[i].Equals(matchColor)) ? "black" : bgcolors[i];
            _jsManager.ChangeBorder(IDs[i], bc);
        }
    }

    //force a redraw of the editor
    public void Refresh()
    {
        StateHasChanged(); //forces an update
    }

    //received a new hot item from palette editor
    public void SetHotItem(Item item)
    {

        //mark old one as not being edited
        if (_hotItem != null)
        {
            _hotItem.Editing = false;
        }
        _hotItem = item;

        if (_hotItem == null)
        {
        }
        else
        {
            _hotItem.Editing = true;
        }

        FixLabels();
        Refresh(); //forces an update
    }
}
