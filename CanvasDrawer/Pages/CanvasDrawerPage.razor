@page "/canvasdrawerpage"
@implements IDisposable
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@using Json;
@using Util;
@using Graphics;
@using Graphics.Popup;
@using Graphics.Theme;
@using Graphics.Items;

@using Nodes
@using Toolbar
@using Editor
@using ShapeChooser
@using TextColor
@using Feedback
@using Palette
@using ConnectorChooser
@using Popup
@using DrawingCanvas

<style>

        @@font-face {
            font-family: Roboto;
            src: url("Roboto-Regular.ttf");
        }

        * {
            box-sizing: border-box;
        }

        body {
            background: @BackgroundColor();
            margin: 0;
            padding: 0;
            outline: none;
        }

        div {
            width: 100%;
            height: 100%;
        }

        html, mframe #fullheight {
            min-width: 100% !important;
            min-height: 100% !important;
            height: 100%;
            width: 100%;
            overflow: hidden;
        }

        mframe {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
            display: grid;
            grid-template-columns: 30px 350px 1fr 135px 180px;
            grid-template-rows: @FirstRowHeight() 200px 300px 60px 1fr;
            grid-gap: 3px;
            font-family: Roboto, Arial, Helvetica, sans-serif;
            background: @BackgroundColor();
            border: 0px solid @ContainerBorderColor();
        }

        /* nodes*/
        #nodes {
            grid-row: 1 / 2;
            grid-column: 2 / 6;
        }

        /* toolbar */
        #tools {
            grid-row: 2 / 5;
            grid-column: 1 / 2;
        }

        #dcboundary {
            grid-row: 2 / 5;
            grid-column: 2 / 6;
        }

        #propeditor {
            grid-row: 2 / 4;
            grid-column: 4 / 6;
            float:right;
        }

        #feedbacktext {
            grid-row: 2 / 4;
            grid-column: 2 / 3;
            float: right;
        }

        /*Connector Palette*/
        #colorpick {
            grid-row: 2 / 3;
            grid-column: 5 / 6;
            float: right;
        }

    /*Text color Palette*/
    #tcolorpick {
        grid-row: 2 / 3;
        grid-column: 5 / 6;
        float: right;
    }

        tools {
            float: left;
            width: 30px;
            margin: 0;
            padding: 0;
            font-size: 10px;
            border: none;
        }
        feedback {
            width: 100%;
            height: 100%;
            min-height: 100%;
            padding: 1px;
            font-size: 9px;
        }

        m3popup {
        }

        palette {
            float: right;
            width: 100%;
            height: 100%;
            min-height: 100%;
            padding: 1px;
        }

    editor {
        float: right;
        width: 100%;
        height: 100%;
        min-height: 100%;
        padding: 1px;
        font-size: 10px;
    }


        .box {
            width: 25%;
            height: 100%;
            float: right;
            pointer-events: none;
            opacity: 1.0;
            display: block;
        }

    .stack-top {
        z-index:1;
        float: right;
        margin: 2px;
    }

        .stack-top-2 {
            float: left;
        }

        .stack-top-3 {
            z-index: 2;
            float: right;
            margin: 2px;
        }

        .stack-top-4 {
            z-index: 10;
        }
</style>



<div id="mainframe">
    <mframe @onclick="MouseClick">
        <section id="nodes"><Nodes /></section>
        <section id="tools"><Toolbar /></section>
        <section id="dcboundary"><DrawingCanvas /></section>
        <section id="propeditor" class="box stack-top">
            <editor>
                <Editor />
            </editor>
        </section>
        <section id="feedbacktext" class="box stack-top-2">
            <feedback>
                <Feedback />
            </feedback>
        </section>
        <section id="colorpick" class="box stack-top-3">
            <palette>
                <Palette />
            </palette>
        </section>
        <section id="tcolorpick" class="box stack-top-3">
            <palette>
                <TextColor />
            </palette>
        </section>
        <section class="box stack-top-4">
            <m3popup>
                <Popup />
            </m3popup>
        </section>
        <section class="box stack-top-4">
            <m3popup>
                <ShapeChooser />
            </m3popup>
        </section>
        <section class="box stack-top-4">
            <m3popup>
                <ConnectorChooser />
            </m3popup>
        </section>
    </mframe>


</div>

@code {

    //a mouse click has occurred
    void MouseClick(MouseEventArgs e)
    {
        if (e.Button == 0)
        {
            SubnetShapeMenu.Instance.GlobalMouseDown(e);
            ConnectorMenu.Instance.GlobalMouseDown(e);
        }
    }

    //get the background color from the theme manager
    public String BackgroundColor()
    {
        return ThemeManager.ContainerColor;
    }

    public String ContainerBorderColor()
    {
        return ThemeManager.ContainerBorderColor;
    }


    //is the map editable
    bool IsMapEditable()
    {
        return DisplayManager.Instance.MapIsEditable();
    }

    //Should the component be hidded because the GUI
    //is not editable
    bool IsToolbarHidden()
    {
        return !IsMapEditable();
    }

    private String FirstRowHeight()
    {
        return IsToolbarHidden() ? "4px" : "37px";
    }

    //initialization
    private void InitOnce()
    {
        GraphicsManager.Instance.CanvasRefresher = Refresh;
        JsonManager.Instance.JsonExtReader = RenderMapFromJsonString;


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            InitOnce();
        }
    }

    protected override void OnInitialized()
    {
        // Subscribe to the event
        NavigationManager.LocationChanged += LocationChanged;

        base.OnInitialized();
    }

    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        NavigationManager.LocationChanged -= LocationChanged;
    }

    /// <summary>
    /// Tell page wrapper that the net map component is ready.
    /// Likely, this is used to know when it is ok to pass in a json string
    /// from the page wrapper, representing a net map to render.
    /// </summary>
    /// <returns></returns>
    private async Task CanvasReady()
    {
        await JSRuntime.InvokeVoidAsync("onCanvasReady");
    }


    [JSInvokable]
    public static void RenderMapFromJsonString(string jsonStr)
    {
        JsonManager.Instance.Deserialize(jsonStr);
        SharedTimer.Instance.RedrawPending = true;
    }



    [JSInvokable]
    public static void UpdateTheme(string theme)
    {

        if (theme == null)
        {
            return;
        }

        ThemeManager.SetTheme(theme);

        //if (theme.Contains("ight")) {
        //    SharedTimer.CreateChangeTheme("light", 3);
        //}
        //else if (theme.Contains("ark")) {
        //    SharedTimer.CreateChangeTheme("dark", 3);
        //}
        //ThemeManager.UpdateTheme(theme);
    }

    [JSInvokable]
    public static void SetEditable(bool isEditable)
    {
        GraphicsManager.Instance.SetEditable(isEditable);
    }

    [JSInvokable]
    public static void SetMapFrameSize(int width, int height)
    {
        DisplayManager.Instance.SetMapFrameSize(width, height);
    }

    [JSInvokable]
    public static String GetMapJson()
    {
        return JsonManager.Instance.Serialize();
    }

    [JSInvokable]
    public static bool MapNeedsSaving()
    {
        return DirtyManager.Instance.IsDirty;
    }

    [JSInvokable]
    public static void PageLoaded()
    {
    }

    [JSInvokable]
    public static void MapWasSaved()
    {
        DirtyManager.Instance.SetClean();
    }

    //this will be called from javascript when the browser is resized
    [JSInvokable("WindowResized")]
    public static void WidowResized()
    {
        if (GraphicsManager.Instance.PageManager != null)
        {
            GraphicsManager.Instance.PageManager.WindowResized();
        }
    }

    //this will be called from javascript when the browser is scrolled
    [JSInvokable("WindowScrolled")]
    public static void WidowScrolled()
    {
        JSInteropManager? jsmgr = JSInteropManager.Instance;
        if (jsmgr != null)
        {
            jsmgr.WindowScrolled();
        }
    }

    //force a redraw
    public void Refresh()
    {
        StateHasChanged(); //forces an update
    }
}
